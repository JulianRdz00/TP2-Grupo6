@startuml

class Casilla {
  - posicion: int
  - movibles: ArrayList<Movible>
  - ubicable: Ubicable
  + Casilla(unNumeroPosicion: int)
  + colocarMovible(unMovible: Movible): void
  + moverMovible(casillaDestino: Casilla, unMovible: Movible): void
  + tieneMovible(unMovible: Movible): boolean
  + getPosicion(): int
}

class Comida {
  - valorEnergetico: int
  + Comida(unValorEnergetico: int)
  + calcularValorEnergetico(): int
}

class Energia {
  - valor: int
  + Energia(valor: int)
  + calcularEnergia(): int
  + aumentarEnergiaComiendo(unaComida: Comida): int
  + gastarEnergiaPeleando(gladiador: Gladiador): int
  + disminuirEnergia(unValor: int): void
}

class Gladiador implements Movible {
  - energia: Energia
  - equipamiento: Stack<Equipamiento>
  - seniority: Seniority
  + Gladiador()
  + Gladiador(energia: int)
  + Gladiador(energia: int, seniority: Seniority)
  + caclularEnergia(): int
  + alimentarse(unaComida: Comida): int
  + verEquipamiento(): Stack<Equipamiento>
  + verSiguienteEquipamiento(): Equipamiento
  + equiparse(): Equipamiento
  + usarEquipamiento(): int
  + pelearContraFiera(): int
  + mover(unaCantidad: int): void
  + aumentarTurno(): void
  + verSeniority(): Seniority
  + estaCompleto(): boolean
}

interface Movible {
  + estaCompleto(): boolean
  + mover(unosPasos: int): void
}

interface Equipamiento {
  + equiparProximo(equipamiento: Stack<Equipamiento>): Equipamiento
  + siguienteEquipamiento(): Equipamiento
  + usar(): int
}

class Juego implements Dado {
  - turnos: int
  - jugadores: ArrayList<Jugador>
  - terminado: boolean
  - tablero: Tablero
  + Juego(jugadores: ArrayList<Jugador>, tamanio: int)
  + getJugadores(): ArrayList<Jugador>
  + jugarTurno(): void
  + tirarDado(): int
  + terminado(): boolean
}

class Jugador implements Dado {
  - movible: Movible
  + Jugador(movible: Movible)
  + inicializarMovible(tablero: Tablero): void
  + moverMovible(tablero: Tablero): void
  + tirarDado(): int
}

class Tablero {
  - casillas: ArrayList<Casilla>
  - mapa: Map<Movible, Integer>
  + Tablero(tamanio: int)
  + getCasillas(): ArrayList<Casilla>
  + inicializarMovible(movible: Movible): void
  + ubicarMovible(movible: Movible, unosPasos: int): void
  + obtenerCasillaDe(movible: Movible): Casilla
  + obtenerCasillaDe(posicion: int): Casilla
}

class Seniority {
  + sumarPasos(unaCantidad: int): void
  + sumarPaso(): Seniority
}

class Novato implements Seniority {
  // Novato-specific methods
}

class Casco implements Equipamiento {
  // Casco-specific methods
}

Juego *- "1..*" Jugador: <<use>>
Jugador *- "1" Movible: <<use>>
Jugador *- "1" Dado: <<use>>
Jugador *- "1" Tablero: <<use>>
Tablero *- "1..*" Casilla: <<use>>
Tablero *- "1" Movible: <<use>>
Gladiador *- "1" Energia: <<use>>
Gladiador *- "1..*" Equipamiento: <<use>>
Gladiador *- "1" Seniority: <<use>>

@enduml
