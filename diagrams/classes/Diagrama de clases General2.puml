@startuml

class Posicion {
  -x: int
  -y: int
  +Posicion(x: int, y: int)
  +getX(): int
  +getY(): int
}

class Energia {
  -valor: int
  +Energia(valor: int)
  +calcularEnergia(): int
  +aumentarEnergiaComiendo(unaComida: Comida): int
  +aumentarEnergia(unaCantidad: int): Energia
  +gastarEnergiaPeleando(gladiador: Gladiador): int
  +disminuirEnergia(unValor: int): int
}

class Comida {
  -valorEnergetico: int
  +Comida(valorEnergetico: int)
  +calcularValorEnergetico(): int
}

interface Movible {
  +mover(unosPasos: int)
  +estaCompleto(): boolean
}

class Gladiador {
  -energia: Energia
  -equipamiento: Stack<Equipamiento>
  -seniority: Seniority
  +Gladiador()
  +Gladiador(energia: int)
  +Gladiador(energia: int, seniority: Seniority)
  +vs(obstaculo: Obstaculo)
  +obtenerPremio(premio: Premio)
  +calcularEnergia(): int
  +alimentarse(unaComida: Comida): int
  +verEquipamiento(): Stack<Equipamiento>
  +verSiguienteEquipamiento(): Equipamiento
  +equiparse(): Equipamiento
  +usarEquipamiento(): int
  +pelearContraFiera(): int
  +afectarEnergia(unaCantidad: int)
  +mover(unaCantidad: int)
  +aumentarTurno()
  +verSeniority(): Seniority
  +estaCompleto(): boolean
  +getEquipamiento(): Equipamiento
}

class Equipamiento {
  +siguienteEquipamiento(): Equipamiento
  +equiparProximo(equipamiento: Stack<Equipamiento>): Equipamiento
  +usar(): int
}

class Obstaculo {
  +afectarGladiador(gladiador: Gladiador)
}

class Premio {
  +afectarGladiador(gladiador: Gladiador)
}

class Casilla {
  -posicion: Posicion
  -premio: Premio
  -obstaculo: Obstaculo
  +moverMovible(destino: Casilla, movible: Movible)
  +afectarMovible(movible: Movible)
}


class Mapeador {
  -casillas: List<Casilla>
  -mapa: Map<Movible, Casilla>
  +getCasillas(): List<Casilla)
  +Mapeador(casillas: List<Casilla>)
  +inicializarMovible(movible: Movible)
  +obtenerCasillaDestino(casillaActual: Casilla, unosPasos: int): Casilla
  +tieneSiguiente(casilla: Casilla): boolean
  +ubicarMovible(movible: Movible, casilla: Casilla)
  +obtenerCasillaIntermedia(): Casilla
  +obtenerCasillaDe(movible: Movible): Casilla
  +obtenerCasillaDe(posicion: int): Casilla
}

class Tablero {
  -mapeador: Mapeador
  +Tablero(casillas: List<Casilla>)
  +getCasillas(): List<Casilla)
  +inicializarMovible(movible: Movible)
  +moverMovible(movible: Movible, unosPasos: int)
  +obtenerCasillaDe(movible: Movible): Casilla
  +obtenerCasillaDe(posicion: int): Casilla
}

class Jugador {
  -movible: Movible
  +Jugador(movible: Movible)
  +inicializarMovible(tablero: Tablero)
  +moverMovible(tablero: Tablero)
}

class Logger {
  -logger: Logger
  +info(mensaje: String)
  +error(mensaje: String)
  +debug(mensaje: String)
}

Posicion --|> Movible
Energia --|> Movible
Comida --|> Premio
Equipamiento --|> Premio
Gladiador --|> Movible
Equipamiento --|> Movible
Obstaculo --|> Casilla
Premio --|> Casilla
Casilla --|> Movible
Mapeador --|> Movible
Mapeador --|> Casilla
Tablero --|> Movible
Tablero --|> Casilla
Jugador --|> Movible

@enduml
